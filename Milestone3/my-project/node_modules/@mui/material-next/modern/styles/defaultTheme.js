import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
const _excluded = ["colorSchemes", "opacity", "overlays", "shape", "md3", "ref", "sys", "palette"],
  _excluded2 = ["mode", "colorScheme", "ref", "sys"];
import { deepmerge } from '@mui/utils';
import extendTheme from './extendTheme';
export const getThemeWithVars = themeInput => {
  const _extendTheme = extendTheme(themeInput),
    {
      colorSchemes,
      opacity,
      overlays,
      shape,
      md3,
      ref,
      sys,
      palette: paletteInput
    } = _extendTheme,
    restTheme = _objectWithoutPropertiesLoose(_extendTheme, _excluded);
  const colorSchemePalette = deepmerge(colorSchemes[paletteInput?.colorScheme || 'light'].palette, paletteInput);
  const {
      mode = 'light',
      colorScheme = 'light',
      // @ts-ignore md3 specific token
      ref: colorSchemeRef,
      // @ts-ignore md3 specific token
      sys: colorSchemeSys
    } = colorSchemePalette,
    palette = _objectWithoutPropertiesLoose(colorSchemePalette, _excluded2);
  return _extends({
    opacity,
    overlays,
    shape,
    md3,
    ref: _extends({}, ref, colorSchemeRef),
    sys: _extends({}, sys, colorSchemeSys)
  }, restTheme, {
    colorSchemes: _extends({}, colorSchemes, {
      [colorScheme]: {
        palette,
        ref: colorSchemeRef,
        sys: colorSchemeSys
      }
    }),
    palette: _extends({}, palette, {
      mode,
      colorScheme
    }),
    vars: {
      opacity,
      overlays,
      shape,
      ref: _extends({}, ref, colorSchemeRef),
      sys: _extends({}, sys, colorSchemeSys),
      md3,
      palette
    }
  });
};
const defaultTheme = getThemeWithVars();
export default defaultTheme;